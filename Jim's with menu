// ConsoleApplication18.cpp : Defines the entry point for the console application.
/*
Variables:

int:
x - the x screen coordinate
y - the y screen coordinate
i - the turn number, used to check for a win
a - the initial value of the pF[a][b] array
b - the secondary value of the pF[a][b] array
r - used to check to replay or exit
p1W - keeps track of number of wins for player 1
p2W - keeps track of number of wins for player 2

bool:
versus - main loop for game inputs
restart - loop to restart or exit program
choice - loop to choose to replay or end program

*/

#include "stdafx.h"
#include <iostream>
#include <Windows.h>
using namespace std;

HANDLE screen = GetStdHandle(STD_OUTPUT_HANDLE);

COORD coordinate;

void setP(int, int);




int main()
{
	bool mainMenu = true;
	int w = 9, main_menu = 0, pause_menu = 0;
	
	setP(30, 9); cout << "*--------*";
	setP(30, 10); cout << "|"; setP(39, 10); cout << "|";
	setP(30, 11); cout << "*--------*";

	while (mainMenu == true)
	{
		if (main_menu == 0)
		{
			setP(23, 18); cout << "                        ";
			setP(23, 18); cout << "Currently Not Available.";
		}
		
		else if (main_menu == 1)
		{
			setP(23, 18); cout << "                        ";
			setP(23, 18); cout << "Play Against A Friend!";
		}
		else
		{
			setP(23, 18); cout << "                        ";
			setP(23, 18); cout << "Exit The Game.";
		}
	
		setP(20, 5); cout << "*-----------------------------*";
		setP(20, 6); cout << "|"; setP(50, 6); cout << "|";
		setP(20, 7); cout << "|"; setP(30, 7); cout << "TIC-TAC-TOE"; setP(50, 7); cout << "|";
		setP(20, 8); cout << "|"; setP(30, 8); cout << "-----------"; setP(50, 8); cout << "|";
		setP(20, 9); cout << "|"; setP(50, 9); cout << "|";
		setP(20, 10); cout << "|"; setP(31, 10); cout << "1-Player"; setP(50, 10); cout << "|";
		setP(20, 11); cout << "|"; setP(50, 11); cout << "|";
		setP(20, 12); cout << "|"; setP(31, 12); cout << "2-Player"; setP(50, 12); cout << "|";
		setP(20, 13); cout << "|"; setP(50, 13); cout << "|";
		setP(20, 14); cout << "|"; setP(31, 14); cout << "Exit"; setP(50, 14); cout << "|";
		setP(20, 15); cout << "|"; setP(50, 15); cout << "|";
		setP(20, 16); cout << "*-----------------------------*";

		system("pause>nul");

		if (GetAsyncKeyState(VK_DOWN) && w != 13)
		{
			setP(30, w); cout << "          ";
			setP(30, w + 1); cout << " "; setP(39, w + 1); cout << " ";
			setP(30, w + 2); cout << "          ";
			w += 2;
			main_menu++;
			
			if (w == 11)
			{
				setP(30, w); cout << "*--------*";
				setP(30, w + 1); cout << "|"; setP(39, w + 1); cout << "|";
				setP(30, w + 2); cout << "*--------*";
			}
			
			if (w == 13)
			{
				setP(30, w); cout << "*----*";
				setP(30, w + 1); cout << "|"; setP(35, w + 1); cout << "|";
				setP(30, w + 2); cout << "*----*";
			}
		}

		if (GetAsyncKeyState(VK_UP) && w != 9)
		{
			
			if (w == 13)
			{
				setP(35, w + 1); cout << " ";
			}
			
			setP(30, w); cout << "          ";
			setP(30, w + 1); cout << " "; setP(39, w + 1); cout << " ";
			setP(30, w + 2); cout << "          ";
			w -= 2;
			main_menu--;
			setP(30, w); cout << "*--------*";
			setP(30, w + 1); cout << "|"; setP(39, w + 1); cout << "|";
			setP(30, w + 2); cout << "*--------*";
		}
		


		if (GetAsyncKeyState(VK_RETURN))
		{

			if (main_menu == 0)
			{
				/*
				1 Player code here
				
				
				
				*/
			}








			if (main_menu == 1)
			{	//Start of code for 2-player.
				bool versus = true, restart = true, choice = true, pause;
				int r = 0, p1W = 0, p2W = 0, pause_menu = 0;

				while (restart == true) //Loops the whole program, choice at the end to break
				{
					system("cls");

					char pF[3][3] = { '-','-','-','-','-','-','-','-','-' };	//The array which holds the X's and O's
					int x = 12, y = 6, i = 0, a = 0, b = 0;

					setP(x, y); cout << "^^^";

					while (versus == true)
					{

						//Draws a playing field.
						setP(10, 3);	cout << "*-----------------*";
						setP(10, 5);	cout << "|  " << pF[0][0] << "  |  " << pF[0][1] << "  |  " << pF[0][2] << "  | ";
						setP(10, 7);	cout << "|-----|-----|-----|";
						setP(10, 9);	cout << "|  " << pF[1][0] << "  |  " << pF[1][1] << "  |  " << pF[1][2] << "  | ";
						setP(10, 11);	cout << "|-----|-----|-----|";
						setP(10, 13);	cout << "|  " << pF[2][0] << "  |  " << pF[2][1] << "  |  " << pF[2][2] << "  | ";
						setP(10, 15);	cout << "*-----------------*";
						setP(36, 5);	cout << "Current Score";
						setP(33, 7);	cout << "Player1";
						setP(44, 7);	cout << "Player2";
						setP(36, 9);	cout << p1W;
						setP(47, 9);	cout << p2W;

						setP(32, 4);	cout << "*------------------*";
						setP(32, 5);	cout << "|";	setP(51, 5); cout << "|";
						setP(32, 6);	cout << "|";	setP(51, 6); cout << "|";	setP(36, 6);cout << "=============";
						setP(32, 7);	cout << "|";	setP(51, 7); cout << "|";
						setP(32, 8);	cout << "|";	setP(51, 8); cout << "|";
						setP(32, 9);	cout << "|";	setP(51, 9); cout << "|";
						setP(32, 10);	cout << "*------------------*";

						setP(32, 13);	cout << "Press 'Escape' to pause the game.";

						if (versus == true) 
						{
							setP(10, 0); cout << "*** TIC TAC TOE ***" << endl;
							
							if (i % 2 == 0)		//Checks who's turn it is	
							{
								setP(10, 2); cout << "Player 1's turn (X): " << endl;
							}
							else
							{
								setP(10, 2); cout << "Player 2's turn (O): " << endl;
							}
							
							setP(2, 1); cout << "Please move the arrow keys to the position you want, enter to choose: ";
							setP(0, 17);
						}

						if (i >= 5)	//Checks for a win on turn 5
						{

							if (	//Possible positions of X to win.
								((pF[0][0] == 'X') && (pF[1][0] == 'X') && (pF[2][0] == 'X')) || ((pF[0][1] == 'X') && (pF[1][1] == 'X') && (pF[2][1] == 'X')) ||
								((pF[0][2] == 'X') && (pF[1][2] == 'X') && (pF[2][2] == 'X')) || ((pF[0][0] == 'X') && (pF[0][1] == 'X') && (pF[0][2] == 'X')) ||
								((pF[1][0] == 'X') && (pF[1][1] == 'X') && (pF[1][2] == 'X')) || ((pF[2][0] == 'X') && (pF[2][1] == 'X') && (pF[2][2] == 'X')) ||
								((pF[0][0] == 'X') && (pF[1][1] == 'X') && (pF[2][2] == 'X')) || ((pF[0][2] == 'X') && (pF[1][1] == 'X') && (pF[2][0] == 'X'))
								)
							{
								setP(7, 2); cout << "Game ended! Player 1 Wins!" << endl;
								p1W++;
								versus = false;
								break;
							}
							else if (	//Possible positions of O to win.
								((pF[0][0] == 'O') && (pF[1][0] == 'O') && (pF[2][0] == 'O')) || ((pF[0][1] == 'O') && (pF[1][1] == 'O') && (pF[2][1] == 'O')) ||
								((pF[0][2] == 'O') && (pF[1][2] == 'O') && (pF[2][2] == 'O')) || ((pF[0][0] == 'O') && (pF[0][1] == 'O') && (pF[0][2] == 'O')) ||
								((pF[1][0] == 'O') && (pF[1][1] == 'O') && (pF[1][2] == 'O')) || ((pF[2][0] == 'O') && (pF[2][1] == 'O') && (pF[2][2] == 'O')) ||
								((pF[0][0] == 'O') && (pF[1][1] == 'O') && (pF[2][2] == 'O')) || ((pF[0][2] == 'O') && (pF[1][1] == 'O') && (pF[2][0] == 'O'))
								)
							{
								setP(7, 2); cout << "Game ended! Player 2 Wins!" << endl;
								p2W++;
								versus = false;
								break;
							}

							if (i == 9) //If no one wins in 9 turns, the game ends in a draw.
							{
								setP(7, 2); cout << "                         " << endl;
								setP(15, 2); cout << "DRAW GAME!" << endl;
								versus = false;
								break;
							}
						}


						//cin.ignore(); (if pause can't be used)
						//cin.get(); (if pause can't be used)
						system("pause>nul"); //Pauses the active screen


						if (GetAsyncKeyState(VK_DOWN) && y != 14)	//Moves the cursor down until y = 14 and increases the "a" value for pF[a][b]
						{
							setP(x, y); cout << "   ";
							y += 4;
							setP(x, y); cout << "^^^";
							a++;
							continue;
						}

						if (GetAsyncKeyState(VK_UP) && y != 6)	//Moves the cursor down until y = 6 and decreases the "a" value for pF[a][b]
						{
							setP(x, y); cout << "   ";
							y -= 4;
							setP(x, y); cout << "^^^";
							a--;
							continue;
						}

						if (GetAsyncKeyState(VK_LEFT) && x != 12)	//Moves the cursor left until x = 12 and decreases the "b" value for pF[a][b]
						{
							setP(x, y); cout << "   ";
							x -= 6;
							setP(x, y); cout << "^^^";
							b--;
							continue;
						}

						if (GetAsyncKeyState(VK_RIGHT) && x != 24)	//Moves the cursor right until x = 24 and increases the "b" value for pF[a][b]
						{
							setP(x, y); cout << "   ";
							x += 6;
							setP(x, y); cout << "^^^";
							b++;
							continue;
						}

						if (GetAsyncKeyState(VK_RETURN)) //When enter/return is pressed, checks for even # rounds and checks if the element is already an 'X' or 'O'
						{
							if ((i % 2 == 0) && (pF[a][b] == '-'))	//Places an X into pF[a][b] if the round is even
							{
								pF[a][b] = 'X';
								i++;
							}
							else if (!(i % 2 == 0) && (pF[a][b] == '-'))	//Places an O into pF[a][b] if the round is Odd
							{
								pF[a][b] = 'O';
								i++;
							}
						}
						if (GetAsyncKeyState(VK_ESCAPE))	//Opens the pause menu
						{
							pause = true;
							int z = 9;
							system("cls");
							setP(30, 9); cout << "*--------*";
							setP(30, 10); cout << "|"; setP(39, 10); cout << "|";
							setP(30, 11); cout << "*--------*";
							while (pause == true)
							{
								setP(20, 5); cout << "*----------------------------*";
								setP(20, 6); cout << "|"; setP(49, 6); cout << "|";
								setP(20, 7); cout << "|"; setP(32, 7); cout << "PAUSED"; setP(49, 7); cout << "|";
								setP(20, 8); cout << "|"; setP(32, 8); cout << "------"; setP(49, 8); cout << "|";
								setP(20, 9); cout << "|"; setP(49, 9); cout << "|";
								setP(20, 10); cout << "|"; setP(31, 10); cout << "Continue"; setP(49, 10); cout << "|";
								setP(20, 11); cout << "|"; setP(49, 11); cout << "|";
								setP(20, 12); cout << "|"; setP(31, 12); cout << "Main Menu"; setP(49, 12); cout << "|";
								setP(20, 13); cout << "|"; setP(49, 13); cout << "|";
								setP(20, 14); cout << "|"; setP(31, 14); cout << "Quit"; setP(49, 14); cout << "|";
								setP(20, 15); cout << "|"; setP(49, 15); cout << "|";
								setP(20, 16); cout << "*----------------------------*";

								system("pause>nul");

								if (GetAsyncKeyState(VK_DOWN) && z != 13)
								{
									setP(30, z); cout << "           ";
									setP(30, z + 1); cout << " "; setP(39, z + 1); cout << "  ";
									setP(30, z + 2); cout << "           ";
									z += 2;
									pause_menu++;


									if (z == 11)
									{
										setP(30, z); cout << "*---------*";
										setP(30, z + 1); cout << "|"; setP(40, z + 1); cout << "|";
										setP(30, z + 2); cout << "*---------*";
									}

									if (z == 13)
									{
										setP(30, z); cout << "*----*";
										setP(30, z + 1); cout << "|"; setP(35, z + 1); cout << "|";
										setP(30, z + 2); cout << "*----*";
									}
								}

								if (GetAsyncKeyState(VK_UP) && z != 9)
								{
									if (z == 13)
									{
										setP(35, 14); cout << " ";
									}


									setP(30, z); cout << "           ";
									setP(30, z + 1); cout << " "; setP(40, z + 1); cout << " ";
									setP(30, z + 2); cout << "           ";
									z -= 2;
									pause_menu--;

									if (z == 9)
									{
										setP(30, z); cout << "*--------*";
										setP(30, z + 1); cout << "|"; setP(39, z + 1); cout << "|";
										setP(30, z + 2); cout << "*--------*";
									}

									if (z == 11)
									{
										setP(30, z); cout << "*---------*";
										setP(30, z + 1); cout << "|"; setP(40, z + 1); cout << "|";
										setP(30, z + 2); cout << "*---------*";
									}
								}

								if (GetAsyncKeyState(VK_RETURN))
								{
									if (pause_menu == 0)
									{
										pause = false;
										system("cls");
										setP(x, y); cout << "^^^";
										break;
									}
									if (pause_menu == 1)
									{
										pause = false;
										versus = false;
										restart = false;
										choice = false;
										system("cls");
										w = 9;
										main_menu = 0;
										setP(30, w); cout << "*--------*";
										setP(30, w + 1); cout << "|"; setP(39, w + 1); cout << "|";
										setP(30, w + 2); cout << "*--------*";
										break;
									}
									if (pause_menu == 2)
									{
										pause = false;
										versus = false;
										restart = false;
										choice = false;
										mainMenu = false;
										break;
									}
								}//End of if(GetAsyncKeyState(VK_RETURN))
							}//End of while pause == true
						}// End of if(GetAsyncKeyState(VK_ESCAPE))
					}
					
					if (!(GetAsyncKeyState(VK_ESCAPE)) && choice == true)
					{
						setP(0, 18); cout << "Would you like to play again?" << endl;
						setP(2, 20); cout << "Yes";
						setP(9, 20); cout << "No";
						x = 2;
						setP(2, 21); cout << "^^^";
					}


					
					while (choice == true)	//Choice of playing more or closing the program.
					{
						system("PAUSE>nul");
						
						if (GetAsyncKeyState(VK_LEFT) && x != 2) //Left or right selection for yes or no, increases or decreases "r"
						{
							setP(x, 21); cout << "     ";
							x -= 7;
							setP(x, 21); cout << "^^^";
							r--;
						}
						else if (GetAsyncKeyState(VK_RIGHT) && x != 9)
						{
							setP(x, 21); cout << "     ";
							x += 7;
							setP(x, 21); cout << "^^";
							r++;
						}

						if (GetAsyncKeyState(VK_RETURN))	//Takes the "r" value to restart or end the program
						{
							if (r == 0)
							{
								versus = true;
								break;
							}
							else if (r == 1)
							{
								restart = false;
								system("cls");
								w = 9;
								main_menu = 0;
								setP(30, w); cout << "*--------*";
								setP(30, w + 1); cout << "|"; setP(39, w + 1); cout << "|";
								setP(30, w + 2); cout << "*--------*";
								break;
							}
						}
					}
				}		
			} //End of if main_menu == 1 End of code for 2-player.
			
			if (main_menu == 2)
			{
				mainMenu = false;
				break;
			}
		}
	}

	setP(0, 23);

    return 0;
}

void setP(int x, int y)
{
	coordinate.X = x;
	coordinate.Y = y;

	SetConsoleCursorPosition(screen, coordinate);
}
